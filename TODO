Now:
- Show the right current speed in sensor control form
- Mutex / Semaphore for ringbuffer access (with #VALID_DATA define or optional, because
	it makes the ringbuffer access slower!

Important:
- Make a warning if wrong formular data are entered (ringbuffersize to big, 
	speed to low or zero etc.)
- Measure the latency (worst-, best- and average case) and reset it after resetting 
  the speed
- Makefile with Debug and Release Target, to get faster access without profiling
- Reviewing code and document more code via Doxygen
- Updating, reviewing and documenting signal-generator
- Make simple control script for the signal-generator
- Add SWIG Interfaces for exceptions etc.

Maybe:
- Make the datarecorder state serializable (also load the last state on startup)
- Make the 'all recorded data' section faster with writing a C++ Module, because
	Python loops are very slow.
- Calculate the Ringbuffer-Overflow in Seconds, Hours, Days
- Make the Jiffies more human readable

Maybe in the Future:
- Record more than one GPIO-Pin (multiple sensors)
- Save a whole recording session in a file
- Refresh also the HTML-Table
- If it is possible with Xenomai: Let the webapplication not running in root
